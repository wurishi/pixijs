const webpack = require('webpack');
const HP = require('html-webpack-plugin');
const path = require('path');
const fs = require('fs');

const configList = [];

const { options } = webpack({
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: 'ts-loader',
      },
    ],
  },
  resolve: {
    extensions: ['.js', '.jsx', '.ts', '.tsx'],
  },
  plugins: [
    new HP({
      template: path.resolve(__dirname, 'template.html'),
    }),
  ],
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist') + '/[name]',
  },
  externals: ['pixi.js'],
  devServer: {
    open: true,
    port: 9000,
    contentBase: path.resolve(__dirname, 'dist'),
  },
  mode: 'production',
});

const links = [];

fs.readdirSync(path.join(__dirname, 'src')).forEach((file) => {
  if (file.endsWith('.ts')) {
    const lastIndex = file.lastIndexOf('.ts');
    // entry[file.substr(0, lastIndex)] = path.join(__dirname, file);
    const name = file.substr(0, lastIndex);
    configList.push({
      ...options, //
      entry: path.join(__dirname, 'src', file),
      output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist', name),
      },
    });
    links.push(`./${name}/index.html`);
  }
});
// console.log(entry);
// 占用过高内存无法正常打包
const menuConfig = require('./config');
const m = Object.keys(menuConfig)
  .map((key) => {
    return {
      label: key,
      sort: menuConfig[key].sort,
      children: menuConfig[key].children,
    };
  })
  .sort((a, b) => a.sort - b.sort);
const htmlContent = m
  .map((item) => {
    const c = item.children
      .map((a) => {
        const link = links.find((t) => t.indexOf(a) >= 0);
        return `<a href="${link}">${a}(${link ? '已完成' : '未找到'})</a>`;
      })
      .join('<br />');
    return `
  <h1>${item.label}</h1>
  ${c}
  <hr />
  `;
  })
  .join('');

fs.writeFile(
  path.join(__dirname, 'dist', 'index.html'),
  `
<html></html>
<body>${htmlContent}</body>
`,
  () => {}
);

// fs.writeFile(
//   path.join(__dirname, 'dist', 'index.html'),
//   `
// <html></html>
// <body>${links
//     .map((link) => {
//       // return '<a href="' + link + '" >' + link + '</a>';
//       return `<a href="${link}">${link}</a>`;
//     })
//     .join('<br />')}</body>
// `,
//   () => {}
// );

// console.log(configList);

module.exports = configList;
